openapi: "3.0.0"
info:
    title: "Sample Pet Store App"
    description: "This is a sample server for a pet store."
    termsOfService: "http://example.com/terms/"
    contact:
        name: "API Support"
        url: "http://www.example.com/support"
        email: "support@example.com"
    license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
    version: "1.0.0"
servers:
    - url: "https://development.gigantic-server.com/v1"
        description: "Development server"
    - url: "https://staging.gigantic-server.com/v1"
        description: "Staging server"
    - url: "https://api.gigantic-server.com/v1"
        description: "Production server"
        variables:
            username:
                default: "demo"
                description: "this value is assigned by the service provider, in this example `gigantic-server.com`"
            port:
                enum:
                    - "8443"
                    - "443"
                default: "8443"
            basePath:
                default: "v2"
components:
    schemas:
        Category:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                name:
                    type: "string"
        Tag:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                name:
                    type: "string"
        Pet:
            type: "object"
            properties:
                id:
                    type: "integer"
                    format: "int64"
                name:
                    type: "string"
                petType:
                    type: "string"
                color:
                    type: "string"
                gender:
                    type: "string"
                breed:
                    type: "string"
                status:
                    type: "string"
    parameters:
        skipParam:
            name: "skip"
            in: "query"
            description: "number of items to skip"
            required: true
            schema:
                type: "integer"
                format: "int32"
        limitParam:
            name: "limit"
            in: "query"
            description: "max records to return"
            required: true
            schema:
                type: "integer"
                format: "int32"
    responses:
        NotFound:
            description: "Entity not found."
        IllegalInput:
            description: "Illegal input for operation."
        GeneralError:
            description: "General Error"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/GeneralError"
    securitySchemes:
        api_key:
            type: "apiKey"
            name: "api_key"
            in: "header"
        petstore_auth:
            type: "oauth2"
            flows:
                implicit:
                    authorizationUrl: "http://example.org/api/oauth/dialog"
                    scopes:
                        write:pets: "modify pets in your account"
                        read:pets: "read your pets"
paths:
    - /pets:
            get:
                description: "Returns all pets from the system that the user has access to"
                responses:
                    200:
                        description: "A list of pets."
                        content:
                            application/json:
                                schema:
                                    type: "array"
                                    items:
                                        $ref: "#/components/schemas/pet"
            post:
                description: "user to add to the system"
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                        examples:
                            user:
                                summary: "User Example"
                                externalValue: "http://foo.bar/examples/user-example.json"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/User"
                        examples:
                            user:
                                summary: "User example in XML"
                                externalValue: "http://foo.bar/examples/user-example.xml"
                    text/plain:
                        examples:
                            user:
                                summary: "User example in Plain text"
                                externalValue: "http://foo.bar/examples/user-example.txt"
                    "*/*":
                        examples:
                            user:
                                summary: "User example in other format"
                                externalValue: "http://foo.bar/examples/user-example.whatever"
    - /pets/{petId}:
            get:
                description: "Returns pets based on ID"
                summary: "Find pets by ID"
                operationId: "getPetsById"
                parameters:
                    - name: "id"
                        in: "path"
                        description: "ID of pet to use"
                        required: true
                        schema:
                            type: "array"
                            items:
                                type: "string"
                        style: "simple"
                responses:
                    200:
                        description: "pet response"
                        content:
                            "*/*":
                                schema:
                                    type: "array"
                                    items:
                                        $ref: "#/components/schemas/Pet"
                    default:
                        description: "error payload"
                        content:
                            text/html:
                                schema:
                                    $ref: "#/components/schemas/ErrorModel"
            put:
                tags:
                    - "pet"
                summary: "Updates a pet in the store with form data"
                operationId: "updatePetWithForm"
                parameters:
                    - name: "petId"
                        in: "path"
                        description: "ID of pet that needs to be updated"
                        required: true
                        schema:
                            type: "string"
                requestBody:
                    content:
                        application/x-www-form-urlencoded:
                            schema:
                                type: "object"
                                properties:
                                    name:
                                        description: "Updated name of the pet"
                                        type: "string"
                                    status:
                                        description: "Updated status of the pet"
                                        type: "string"
                                required:
                                    - "status"
                responses:
                    200:
                        description: "Pet updated."
                        content:
                            application/json: {}
                            application/xml: {}
                    405:
                        description: "Invalid input"
                        content:
                            application/json: {}
                            application/xml: {}
                security:
                    - petstore_auth:
                            - "write:pets"
                            - "read:pets"
tags:
    - name: "pet"
        description: "Pets operations"
